// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: matchmaker/messages.proto

package matchmaker

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlayerState int32

const (
	PlayerState_PLAYER_STATE_OFFLINE   PlayerState = 0
	PlayerState_PLAYER_STATE_IDLE      PlayerState = 1
	PlayerState_PLAYER_STATE_SEARCHING PlayerState = 2
	PlayerState_PLAYER_STATE_PLAYING   PlayerState = 3
)

// Enum value maps for PlayerState.
var (
	PlayerState_name = map[int32]string{
		0: "PLAYER_STATE_OFFLINE",
		1: "PLAYER_STATE_IDLE",
		2: "PLAYER_STATE_SEARCHING",
		3: "PLAYER_STATE_PLAYING",
	}
	PlayerState_value = map[string]int32{
		"PLAYER_STATE_OFFLINE":   0,
		"PLAYER_STATE_IDLE":      1,
		"PLAYER_STATE_SEARCHING": 2,
		"PLAYER_STATE_PLAYING":   3,
	}
)

func (x PlayerState) Enum() *PlayerState {
	p := new(PlayerState)
	*p = x
	return p
}

func (x PlayerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerState) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaker_messages_proto_enumTypes[0].Descriptor()
}

func (PlayerState) Type() protoreflect.EnumType {
	return &file_matchmaker_messages_proto_enumTypes[0]
}

func (x PlayerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerState.Descriptor instead.
func (PlayerState) EnumDescriptor() ([]byte, []int) {
	return file_matchmaker_messages_proto_rawDescGZIP(), []int{0}
}

type Reason int32

const (
	Reason_REASON_UNSPECIFIED Reason = 0
	Reason_REASON_PLAYER      Reason = 1
)

// Enum value maps for Reason.
var (
	Reason_name = map[int32]string{
		0: "REASON_UNSPECIFIED",
		1: "REASON_PLAYER",
	}
	Reason_value = map[string]int32{
		"REASON_UNSPECIFIED": 0,
		"REASON_PLAYER":      1,
	}
)

func (x Reason) Enum() *Reason {
	p := new(Reason)
	*p = x
	return p
}

func (x Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_matchmaker_messages_proto_enumTypes[1].Descriptor()
}

func (Reason) Type() protoreflect.EnumType {
	return &file_matchmaker_messages_proto_enumTypes[1]
}

func (x Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Reason.Descriptor instead.
func (Reason) EnumDescriptor() ([]byte, []int) {
	return file_matchmaker_messages_proto_rawDescGZIP(), []int{1}
}

// GameConfiguration contains information for specifying a desired match.
type GameConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gamemode string `protobuf:"bytes,1,opt,name=gamemode,proto3" json:"gamemode,omitempty"`
}

func (x *GameConfiguration) Reset() {
	*x = GameConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaker_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameConfiguration) ProtoMessage() {}

func (x *GameConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaker_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameConfiguration.ProtoReflect.Descriptor instead.
func (*GameConfiguration) Descriptor() ([]byte, []int) {
	return file_matchmaker_messages_proto_rawDescGZIP(), []int{0}
}

func (x *GameConfiguration) GetGamemode() string {
	if x != nil {
		return x.Gamemode
	}
	return ""
}

type MatchRoster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []string `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *MatchRoster) Reset() {
	*x = MatchRoster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaker_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchRoster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchRoster) ProtoMessage() {}

func (x *MatchRoster) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaker_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchRoster.ProtoReflect.Descriptor instead.
func (*MatchRoster) Descriptor() ([]byte, []int) {
	return file_matchmaker_messages_proto_rawDescGZIP(), []int{1}
}

func (x *MatchRoster) GetPlayers() []string {
	if x != nil {
		return x.Players
	}
	return nil
}

// Status represents the current matchmaking state for a single player.
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State PlayerState `protobuf:"varint,1,opt,name=state,proto3,enum=quip.matchmaker.PlayerState" json:"state,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaker_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaker_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_matchmaker_messages_proto_rawDescGZIP(), []int{2}
}

func (x *Status) GetState() PlayerState {
	if x != nil {
		return x.State
	}
	return PlayerState_PLAYER_STATE_OFFLINE
}

type QueueUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Update:
	//
	//	*QueueUpdate_QueueStarted
	//	*QueueUpdate_QueueStopped
	//	*QueueUpdate_MatchFound
	//	*QueueUpdate_MatchCancelled
	//	*QueueUpdate_MatchStarted
	//	*QueueUpdate_MatchFinished
	Update isQueueUpdate_Update `protobuf_oneof:"update"`
}

func (x *QueueUpdate) Reset() {
	*x = QueueUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaker_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueUpdate) ProtoMessage() {}

func (x *QueueUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaker_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueUpdate.ProtoReflect.Descriptor instead.
func (*QueueUpdate) Descriptor() ([]byte, []int) {
	return file_matchmaker_messages_proto_rawDescGZIP(), []int{3}
}

func (m *QueueUpdate) GetUpdate() isQueueUpdate_Update {
	if m != nil {
		return m.Update
	}
	return nil
}

func (x *QueueUpdate) GetQueueStarted() *QueueDetails {
	if x, ok := x.GetUpdate().(*QueueUpdate_QueueStarted); ok {
		return x.QueueStarted
	}
	return nil
}

func (x *QueueUpdate) GetQueueStopped() *QueueStopped {
	if x, ok := x.GetUpdate().(*QueueUpdate_QueueStopped); ok {
		return x.QueueStopped
	}
	return nil
}

func (x *QueueUpdate) GetMatchFound() *MatchDetails {
	if x, ok := x.GetUpdate().(*QueueUpdate_MatchFound); ok {
		return x.MatchFound
	}
	return nil
}

func (x *QueueUpdate) GetMatchCancelled() *MatchCancelled {
	if x, ok := x.GetUpdate().(*QueueUpdate_MatchCancelled); ok {
		return x.MatchCancelled
	}
	return nil
}

func (x *QueueUpdate) GetMatchStarted() *MatchConnection {
	if x, ok := x.GetUpdate().(*QueueUpdate_MatchStarted); ok {
		return x.MatchStarted
	}
	return nil
}

func (x *QueueUpdate) GetMatchFinished() *MatchResults {
	if x, ok := x.GetUpdate().(*QueueUpdate_MatchFinished); ok {
		return x.MatchFinished
	}
	return nil
}

type isQueueUpdate_Update interface {
	isQueueUpdate_Update()
}

type QueueUpdate_QueueStarted struct {
	QueueStarted *QueueDetails `protobuf:"bytes,2,opt,name=queue_started,json=queueStarted,proto3,oneof"`
}

type QueueUpdate_QueueStopped struct {
	QueueStopped *QueueStopped `protobuf:"bytes,3,opt,name=queue_stopped,json=queueStopped,proto3,oneof"`
}

type QueueUpdate_MatchFound struct {
	MatchFound *MatchDetails `protobuf:"bytes,4,opt,name=match_found,json=matchFound,proto3,oneof"`
}

type QueueUpdate_MatchCancelled struct {
	MatchCancelled *MatchCancelled `protobuf:"bytes,5,opt,name=match_cancelled,json=matchCancelled,proto3,oneof"`
}

type QueueUpdate_MatchStarted struct {
	MatchStarted *MatchConnection `protobuf:"bytes,6,opt,name=match_started,json=matchStarted,proto3,oneof"`
}

type QueueUpdate_MatchFinished struct {
	MatchFinished *MatchResults `protobuf:"bytes,7,opt,name=match_finished,json=matchFinished,proto3,oneof"`
}

func (*QueueUpdate_QueueStarted) isQueueUpdate_Update() {}

func (*QueueUpdate_QueueStopped) isQueueUpdate_Update() {}

func (*QueueUpdate_MatchFound) isQueueUpdate_Update() {}

func (*QueueUpdate_MatchCancelled) isQueueUpdate_Update() {}

func (*QueueUpdate_MatchStarted) isQueueUpdate_Update() {}

func (*QueueUpdate_MatchFinished) isQueueUpdate_Update() {}

// QueueDetails contains information about a currently running queue.
type QueueDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config    *GameConfiguration     `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *QueueDetails) Reset() {
	*x = QueueDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaker_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueDetails) ProtoMessage() {}

func (x *QueueDetails) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaker_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueDetails.ProtoReflect.Descriptor instead.
func (*QueueDetails) Descriptor() ([]byte, []int) {
	return file_matchmaker_messages_proto_rawDescGZIP(), []int{4}
}

func (x *QueueDetails) GetConfig() *GameConfiguration {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *QueueDetails) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// QueueStopped contains information about why a queue has stopped.
type QueueStopped struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason  Reason  `protobuf:"varint,1,opt,name=reason,proto3,enum=quip.matchmaker.Reason" json:"reason,omitempty"`
	Message *string `protobuf:"bytes,2,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *QueueStopped) Reset() {
	*x = QueueStopped{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaker_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueStopped) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueStopped) ProtoMessage() {}

func (x *QueueStopped) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaker_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueStopped.ProtoReflect.Descriptor instead.
func (*QueueStopped) Descriptor() ([]byte, []int) {
	return file_matchmaker_messages_proto_rawDescGZIP(), []int{5}
}

func (x *QueueStopped) GetReason() Reason {
	if x != nil {
		return x.Reason
	}
	return Reason_REASON_UNSPECIFIED
}

func (x *QueueStopped) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

// MatchDetails contains information about a potential match that was found.
// Sent as intermediate step for players to accept (send match wager) match before
// allocating a server.
type MatchDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId string                 `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Time    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *MatchDetails) Reset() {
	*x = MatchDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaker_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchDetails) ProtoMessage() {}

func (x *MatchDetails) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaker_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchDetails.ProtoReflect.Descriptor instead.
func (*MatchDetails) Descriptor() ([]byte, []int) {
	return file_matchmaker_messages_proto_rawDescGZIP(), []int{6}
}

func (x *MatchDetails) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchDetails) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type MatchCancelled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Reason  Reason `protobuf:"varint,2,opt,name=reason,proto3,enum=quip.matchmaker.Reason" json:"reason,omitempty"`
}

func (x *MatchCancelled) Reset() {
	*x = MatchCancelled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaker_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchCancelled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCancelled) ProtoMessage() {}

func (x *MatchCancelled) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaker_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCancelled.ProtoReflect.Descriptor instead.
func (*MatchCancelled) Descriptor() ([]byte, []int) {
	return file_matchmaker_messages_proto_rawDescGZIP(), []int{7}
}

func (x *MatchCancelled) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchCancelled) GetReason() Reason {
	if x != nil {
		return x.Reason
	}
	return Reason_REASON_UNSPECIFIED
}

// MatchConnection contains necessary match information to identify and connect to a match.
type MatchConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId    string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
	Connection string `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *MatchConnection) Reset() {
	*x = MatchConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaker_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchConnection) ProtoMessage() {}

func (x *MatchConnection) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaker_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchConnection.ProtoReflect.Descriptor instead.
func (*MatchConnection) Descriptor() ([]byte, []int) {
	return file_matchmaker_messages_proto_rawDescGZIP(), []int{8}
}

func (x *MatchConnection) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

func (x *MatchConnection) GetConnection() string {
	if x != nil {
		return x.Connection
	}
	return ""
}

type MatchResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchId string `protobuf:"bytes,1,opt,name=match_id,json=matchId,proto3" json:"match_id,omitempty"`
}

func (x *MatchResults) Reset() {
	*x = MatchResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_matchmaker_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchResults) ProtoMessage() {}

func (x *MatchResults) ProtoReflect() protoreflect.Message {
	mi := &file_matchmaker_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchResults.ProtoReflect.Descriptor instead.
func (*MatchResults) Descriptor() ([]byte, []int) {
	return file_matchmaker_messages_proto_rawDescGZIP(), []int{9}
}

func (x *MatchResults) GetMatchId() string {
	if x != nil {
		return x.MatchId
	}
	return ""
}

var File_matchmaker_messages_proto protoreflect.FileDescriptor

var file_matchmaker_messages_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x71, 0x75, 0x69,
	0x70, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a,
	0x11, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x27,
	0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x3c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x71, 0x75, 0x69, 0x70, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xc2, 0x03, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x71,
	0x75, 0x69, 0x70, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0d, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x71, 0x75, 0x69, 0x70, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x40, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x71, 0x75, 0x69, 0x70, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x4a, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x71,
	0x75, 0x69, 0x70, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12,
	0x47, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x71, 0x75, 0x69, 0x70, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x71, 0x75, 0x69, 0x70, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x48,
	0x00, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x42, 0x08, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0c, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x71, 0x75,
	0x69, 0x70, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x71, 0x75, 0x69, 0x70, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x59,
	0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x0e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x71, 0x75, 0x69, 0x70, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x0f, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x2a, 0x74, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c, 0x41,
	0x59, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41,
	0x59, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0x33, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x10, 0x01, 0x42, 0x2e, 0x5a, 0x2c, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x61, 0x6d, 0x62, 0x69, 0x74,
	0x4c, 0x4c, 0x43, 0x2f, 0x71, 0x75, 0x69, 0x70, 0x2f, 0x6c, 0x69, 0x62, 0x73, 0x2f, 0x70, 0x62,
	0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_matchmaker_messages_proto_rawDescOnce sync.Once
	file_matchmaker_messages_proto_rawDescData = file_matchmaker_messages_proto_rawDesc
)

func file_matchmaker_messages_proto_rawDescGZIP() []byte {
	file_matchmaker_messages_proto_rawDescOnce.Do(func() {
		file_matchmaker_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_matchmaker_messages_proto_rawDescData)
	})
	return file_matchmaker_messages_proto_rawDescData
}

var file_matchmaker_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_matchmaker_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_matchmaker_messages_proto_goTypes = []interface{}{
	(PlayerState)(0),              // 0: quip.matchmaker.PlayerState
	(Reason)(0),                   // 1: quip.matchmaker.Reason
	(*GameConfiguration)(nil),     // 2: quip.matchmaker.GameConfiguration
	(*MatchRoster)(nil),           // 3: quip.matchmaker.MatchRoster
	(*Status)(nil),                // 4: quip.matchmaker.Status
	(*QueueUpdate)(nil),           // 5: quip.matchmaker.QueueUpdate
	(*QueueDetails)(nil),          // 6: quip.matchmaker.QueueDetails
	(*QueueStopped)(nil),          // 7: quip.matchmaker.QueueStopped
	(*MatchDetails)(nil),          // 8: quip.matchmaker.MatchDetails
	(*MatchCancelled)(nil),        // 9: quip.matchmaker.MatchCancelled
	(*MatchConnection)(nil),       // 10: quip.matchmaker.MatchConnection
	(*MatchResults)(nil),          // 11: quip.matchmaker.MatchResults
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
}
var file_matchmaker_messages_proto_depIdxs = []int32{
	0,  // 0: quip.matchmaker.Status.state:type_name -> quip.matchmaker.PlayerState
	6,  // 1: quip.matchmaker.QueueUpdate.queue_started:type_name -> quip.matchmaker.QueueDetails
	7,  // 2: quip.matchmaker.QueueUpdate.queue_stopped:type_name -> quip.matchmaker.QueueStopped
	8,  // 3: quip.matchmaker.QueueUpdate.match_found:type_name -> quip.matchmaker.MatchDetails
	9,  // 4: quip.matchmaker.QueueUpdate.match_cancelled:type_name -> quip.matchmaker.MatchCancelled
	10, // 5: quip.matchmaker.QueueUpdate.match_started:type_name -> quip.matchmaker.MatchConnection
	11, // 6: quip.matchmaker.QueueUpdate.match_finished:type_name -> quip.matchmaker.MatchResults
	2,  // 7: quip.matchmaker.QueueDetails.config:type_name -> quip.matchmaker.GameConfiguration
	12, // 8: quip.matchmaker.QueueDetails.start_time:type_name -> google.protobuf.Timestamp
	1,  // 9: quip.matchmaker.QueueStopped.reason:type_name -> quip.matchmaker.Reason
	12, // 10: quip.matchmaker.MatchDetails.time:type_name -> google.protobuf.Timestamp
	1,  // 11: quip.matchmaker.MatchCancelled.reason:type_name -> quip.matchmaker.Reason
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_matchmaker_messages_proto_init() }
func file_matchmaker_messages_proto_init() {
	if File_matchmaker_messages_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_matchmaker_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaker_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchRoster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaker_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaker_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaker_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaker_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueStopped); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaker_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaker_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchCancelled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaker_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_matchmaker_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_matchmaker_messages_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*QueueUpdate_QueueStarted)(nil),
		(*QueueUpdate_QueueStopped)(nil),
		(*QueueUpdate_MatchFound)(nil),
		(*QueueUpdate_MatchCancelled)(nil),
		(*QueueUpdate_MatchStarted)(nil),
		(*QueueUpdate_MatchFinished)(nil),
	}
	file_matchmaker_messages_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_matchmaker_messages_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_matchmaker_messages_proto_goTypes,
		DependencyIndexes: file_matchmaker_messages_proto_depIdxs,
		EnumInfos:         file_matchmaker_messages_proto_enumTypes,
		MessageInfos:      file_matchmaker_messages_proto_msgTypes,
	}.Build()
	File_matchmaker_messages_proto = out.File
	file_matchmaker_messages_proto_rawDesc = nil
	file_matchmaker_messages_proto_goTypes = nil
	file_matchmaker_messages_proto_depIdxs = nil
}
