// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: matchmaker/backend.proto

package matchmaker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Backend_AllocateMatch_FullMethodName = "/quip.matchmaker.Backend/AllocateMatch"
	Backend_FinishMatch_FullMethodName   = "/quip.matchmaker.Backend/FinishMatch"
)

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendClient interface {
	// AllocateMatch allocates a gameserver for the specified match.
	AllocateMatch(ctx context.Context, in *AllocateMatchRequest, opts ...grpc.CallOption) (*MatchDetails, error)
	// FinishMatch marks a specified match as completed.
	FinishMatch(ctx context.Context, in *FinishMatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type backendClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendClient(cc grpc.ClientConnInterface) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) AllocateMatch(ctx context.Context, in *AllocateMatchRequest, opts ...grpc.CallOption) (*MatchDetails, error) {
	out := new(MatchDetails)
	err := c.cc.Invoke(ctx, Backend_AllocateMatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendClient) FinishMatch(ctx context.Context, in *FinishMatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Backend_FinishMatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServer is the server API for Backend service.
// All implementations should embed UnimplementedBackendServer
// for forward compatibility
type BackendServer interface {
	// AllocateMatch allocates a gameserver for the specified match.
	AllocateMatch(context.Context, *AllocateMatchRequest) (*MatchDetails, error)
	// FinishMatch marks a specified match as completed.
	FinishMatch(context.Context, *FinishMatchRequest) (*emptypb.Empty, error)
}

// UnimplementedBackendServer should be embedded to have forward compatible implementations.
type UnimplementedBackendServer struct {
}

func (UnimplementedBackendServer) AllocateMatch(context.Context, *AllocateMatchRequest) (*MatchDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateMatch not implemented")
}
func (UnimplementedBackendServer) FinishMatch(context.Context, *FinishMatchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishMatch not implemented")
}

// UnsafeBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServer will
// result in compilation errors.
type UnsafeBackendServer interface {
	mustEmbedUnimplementedBackendServer()
}

func RegisterBackendServer(s grpc.ServiceRegistrar, srv BackendServer) {
	s.RegisterService(&Backend_ServiceDesc, srv)
}

func _Backend_AllocateMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).AllocateMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backend_AllocateMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).AllocateMatch(ctx, req.(*AllocateMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Backend_FinishMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServer).FinishMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Backend_FinishMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServer).FinishMatch(ctx, req.(*FinishMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Backend_ServiceDesc is the grpc.ServiceDesc for Backend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quip.matchmaker.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateMatch",
			Handler:    _Backend_AllocateMatch_Handler,
		},
		{
			MethodName: "FinishMatch",
			Handler:    _Backend_FinishMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matchmaker/backend.proto",
}
