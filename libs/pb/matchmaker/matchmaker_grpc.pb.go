// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: matchmaker/matchmaker.proto

package matchmaker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuipMatchmaker_Connect_FullMethodName = "/quip.matchmaker.QuipMatchmaker/Connect"
)

// QuipMatchmakerClient is the client API for QuipMatchmaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuipMatchmakerClient interface {
	// Connect is a long-lived rpc for clients to send queue actions and
	// receive queue updates.
	Connect(ctx context.Context, opts ...grpc.CallOption) (QuipMatchmaker_ConnectClient, error)
}

type quipMatchmakerClient struct {
	cc grpc.ClientConnInterface
}

func NewQuipMatchmakerClient(cc grpc.ClientConnInterface) QuipMatchmakerClient {
	return &quipMatchmakerClient{cc}
}

func (c *quipMatchmakerClient) Connect(ctx context.Context, opts ...grpc.CallOption) (QuipMatchmaker_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &QuipMatchmaker_ServiceDesc.Streams[0], QuipMatchmaker_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &quipMatchmakerConnectClient{stream}
	return x, nil
}

type QuipMatchmaker_ConnectClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type quipMatchmakerConnectClient struct {
	grpc.ClientStream
}

func (x *quipMatchmakerConnectClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *quipMatchmakerConnectClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QuipMatchmakerServer is the server API for QuipMatchmaker service.
// All implementations should embed UnimplementedQuipMatchmakerServer
// for forward compatibility
type QuipMatchmakerServer interface {
	// Connect is a long-lived rpc for clients to send queue actions and
	// receive queue updates.
	Connect(QuipMatchmaker_ConnectServer) error
}

// UnimplementedQuipMatchmakerServer should be embedded to have forward compatible implementations.
type UnimplementedQuipMatchmakerServer struct {
}

func (UnimplementedQuipMatchmakerServer) Connect(QuipMatchmaker_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

// UnsafeQuipMatchmakerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuipMatchmakerServer will
// result in compilation errors.
type UnsafeQuipMatchmakerServer interface {
	mustEmbedUnimplementedQuipMatchmakerServer()
}

func RegisterQuipMatchmakerServer(s grpc.ServiceRegistrar, srv QuipMatchmakerServer) {
	s.RegisterService(&QuipMatchmaker_ServiceDesc, srv)
}

func _QuipMatchmaker_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QuipMatchmakerServer).Connect(&quipMatchmakerConnectServer{stream})
}

type QuipMatchmaker_ConnectServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type quipMatchmakerConnectServer struct {
	grpc.ServerStream
}

func (x *quipMatchmakerConnectServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *quipMatchmakerConnectServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QuipMatchmaker_ServiceDesc is the grpc.ServiceDesc for QuipMatchmaker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuipMatchmaker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quip.matchmaker.QuipMatchmaker",
	HandlerType: (*QuipMatchmakerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _QuipMatchmaker_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "matchmaker/matchmaker.proto",
}
