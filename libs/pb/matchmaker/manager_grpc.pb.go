// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: matchmaker/manager.proto

package matchmaker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuipManager_CreateMatch_FullMethodName     = "/quip.matchmaker.QuipManager/CreateMatch"
	QuipManager_GetMatch_FullMethodName        = "/quip.matchmaker.QuipManager/GetMatch"
	QuipManager_SetMatchResults_FullMethodName = "/quip.matchmaker.QuipManager/SetMatchResults"
)

// QuipManagerClient is the client API for QuipManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuipManagerClient interface {
	CreateMatch(ctx context.Context, in *CreateMatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMatch(ctx context.Context, in *GetMatchRequest, opts ...grpc.CallOption) (*GetMatchResponse, error)
	SetMatchResults(ctx context.Context, in *SetMatchResultsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type quipManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewQuipManagerClient(cc grpc.ClientConnInterface) QuipManagerClient {
	return &quipManagerClient{cc}
}

func (c *quipManagerClient) CreateMatch(ctx context.Context, in *CreateMatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QuipManager_CreateMatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quipManagerClient) GetMatch(ctx context.Context, in *GetMatchRequest, opts ...grpc.CallOption) (*GetMatchResponse, error) {
	out := new(GetMatchResponse)
	err := c.cc.Invoke(ctx, QuipManager_GetMatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quipManagerClient) SetMatchResults(ctx context.Context, in *SetMatchResultsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QuipManager_SetMatchResults_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuipManagerServer is the server API for QuipManager service.
// All implementations should embed UnimplementedQuipManagerServer
// for forward compatibility
type QuipManagerServer interface {
	CreateMatch(context.Context, *CreateMatchRequest) (*emptypb.Empty, error)
	GetMatch(context.Context, *GetMatchRequest) (*GetMatchResponse, error)
	SetMatchResults(context.Context, *SetMatchResultsRequest) (*emptypb.Empty, error)
}

// UnimplementedQuipManagerServer should be embedded to have forward compatible implementations.
type UnimplementedQuipManagerServer struct {
}

func (UnimplementedQuipManagerServer) CreateMatch(context.Context, *CreateMatchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMatch not implemented")
}
func (UnimplementedQuipManagerServer) GetMatch(context.Context, *GetMatchRequest) (*GetMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatch not implemented")
}
func (UnimplementedQuipManagerServer) SetMatchResults(context.Context, *SetMatchResultsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMatchResults not implemented")
}

// UnsafeQuipManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuipManagerServer will
// result in compilation errors.
type UnsafeQuipManagerServer interface {
	mustEmbedUnimplementedQuipManagerServer()
}

func RegisterQuipManagerServer(s grpc.ServiceRegistrar, srv QuipManagerServer) {
	s.RegisterService(&QuipManager_ServiceDesc, srv)
}

func _QuipManager_CreateMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuipManagerServer).CreateMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuipManager_CreateMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuipManagerServer).CreateMatch(ctx, req.(*CreateMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuipManager_GetMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuipManagerServer).GetMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuipManager_GetMatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuipManagerServer).GetMatch(ctx, req.(*GetMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuipManager_SetMatchResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMatchResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuipManagerServer).SetMatchResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuipManager_SetMatchResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuipManagerServer).SetMatchResults(ctx, req.(*SetMatchResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuipManager_ServiceDesc is the grpc.ServiceDesc for QuipManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuipManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quip.matchmaker.QuipManager",
	HandlerType: (*QuipManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMatch",
			Handler:    _QuipManager_CreateMatch_Handler,
		},
		{
			MethodName: "GetMatch",
			Handler:    _QuipManager_GetMatch_Handler,
		},
		{
			MethodName: "SetMatchResults",
			Handler:    _QuipManager_SetMatchResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matchmaker/manager.proto",
}
