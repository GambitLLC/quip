// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: packages/api/quip-matchmaker.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchmakerClient is the client API for Matchmaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchmakerClient interface {
	// GetStatus returns the current matchmaking status.
	GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	// StartQueue starts searching for a match with the given parameters.
	StartQueue(ctx context.Context, in *StartQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// StopQueue stops searching for a match. Idempotent.
	StopQueue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type matchmakerClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchmakerClient(cc grpc.ClientConnInterface) MatchmakerClient {
	return &matchmakerClient{cc}
}

func (c *matchmakerClient) GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/quip.matchmaker.Matchmaker/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) StartQueue(ctx context.Context, in *StartQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/quip.matchmaker.Matchmaker/StartQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakerClient) StopQueue(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/quip.matchmaker.Matchmaker/StopQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchmakerServer is the server API for Matchmaker service.
// All implementations should embed UnimplementedMatchmakerServer
// for forward compatibility
type MatchmakerServer interface {
	// GetStatus returns the current matchmaking status.
	GetStatus(context.Context, *emptypb.Empty) (*StatusResponse, error)
	// StartQueue starts searching for a match with the given parameters.
	StartQueue(context.Context, *StartQueueRequest) (*emptypb.Empty, error)
	// StopQueue stops searching for a match. Idempotent.
	StopQueue(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedMatchmakerServer should be embedded to have forward compatible implementations.
type UnimplementedMatchmakerServer struct {
}

func (UnimplementedMatchmakerServer) GetStatus(context.Context, *emptypb.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedMatchmakerServer) StartQueue(context.Context, *StartQueueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartQueue not implemented")
}
func (UnimplementedMatchmakerServer) StopQueue(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopQueue not implemented")
}

// UnsafeMatchmakerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchmakerServer will
// result in compilation errors.
type UnsafeMatchmakerServer interface {
	mustEmbedUnimplementedMatchmakerServer()
}

func RegisterMatchmakerServer(s grpc.ServiceRegistrar, srv MatchmakerServer) {
	s.RegisterService(&Matchmaker_ServiceDesc, srv)
}

func _Matchmaker_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quip.matchmaker.Matchmaker/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).GetStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_StartQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).StartQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quip.matchmaker.Matchmaker/StartQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).StartQueue(ctx, req.(*StartQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaker_StopQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakerServer).StopQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quip.matchmaker.Matchmaker/StopQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakerServer).StopQueue(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Matchmaker_ServiceDesc is the grpc.ServiceDesc for Matchmaker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Matchmaker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quip.matchmaker.Matchmaker",
	HandlerType: (*MatchmakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _Matchmaker_GetStatus_Handler,
		},
		{
			MethodName: "StartQueue",
			Handler:    _Matchmaker_StartQueue_Handler,
		},
		{
			MethodName: "StopQueue",
			Handler:    _Matchmaker_StopQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "packages/api/quip-matchmaker.proto",
}
