// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type StatusDetails interface {
	IsStatusDetails()
}

// Represents a custom match in the process of being created.
type Duel struct {
	ID       string  `json:"id"`
	Gamemode string  `json:"gamemode"`
	Players  []*User `json:"players"`
}

func (Duel) IsStatusDetails() {}

type Match struct {
	ID         string        `json:"id"`
	Gamemode   string        `json:"gamemode"`
	Connection *string       `json:"connection,omitempty"`
	Teams      [][]*User     `json:"teams"`
	State      MatchState    `json:"state"`
	Results    *MatchResults `json:"results,omitempty"`
}

func (Match) IsStatusDetails() {}

// TODO: determine schema for match results
//
//	type MatchResults {
//	  placements: [MatchPlacement!]
//	}
//
//	type MatchPlacement {
//	  players: [User!]
//	  place: Int!
//	  earnings?
//	}
type MatchResults struct {
	Winner *string `json:"winner,omitempty"`
}

type Queue struct {
	Gamemode  string    `json:"gamemode"`
	Players   []*User   `json:"players"`
	StartTime time.Time `json:"startTime"`
}

func (Queue) IsStatusDetails() {}

type Status struct {
	State   StatusState   `json:"state"`
	Details StatusDetails `json:"details,omitempty"`
}

type User struct {
	ID           string   `json:"id"`
	Status       *Status  `json:"status"`
	Friends      []*User  `json:"friends,omitempty"`
	MatchHistory []*Match `json:"matchHistory,omitempty"`
}

type MatchState string

const (
	MatchStatePending    MatchState = "PENDING"
	MatchStateInProgress MatchState = "IN_PROGRESS"
	MatchStateFinished   MatchState = "FINISHED"
	MatchStateFailed     MatchState = "FAILED"
)

var AllMatchState = []MatchState{
	MatchStatePending,
	MatchStateInProgress,
	MatchStateFinished,
	MatchStateFailed,
}

func (e MatchState) IsValid() bool {
	switch e {
	case MatchStatePending, MatchStateInProgress, MatchStateFinished, MatchStateFailed:
		return true
	}
	return false
}

func (e MatchState) String() string {
	return string(e)
}

func (e *MatchState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MatchState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MatchState", str)
	}
	return nil
}

func (e MatchState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StatusState string

const (
	StatusStateOffline StatusState = "OFFLINE"
	// Online on mobile application
	StatusStateIDLe StatusState = "IDLE"
	// Searching for a match
	StatusStateSearching StatusState = "SEARCHING"
	// Creating a custom duel
	StatusStateCreating StatusState = "CREATING"
	// Currently in a match
	StatusStatePlaying StatusState = "PLAYING"
)

var AllStatusState = []StatusState{
	StatusStateOffline,
	StatusStateIDLe,
	StatusStateSearching,
	StatusStateCreating,
	StatusStatePlaying,
}

func (e StatusState) IsValid() bool {
	switch e {
	case StatusStateOffline, StatusStateIDLe, StatusStateSearching, StatusStateCreating, StatusStatePlaying:
		return true
	}
	return false
}

func (e StatusState) String() string {
	return string(e)
}

func (e *StatusState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StatusState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StatusState", str)
	}
	return nil
}

func (e StatusState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
