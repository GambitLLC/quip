directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goField(
  forceResolver: Boolean
  name: String
  omittable: Boolean
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

scalar Time

type User {
  id: ID!
  status: Status!
  profile: Profile!
}

# Status
type Status {
  state: State!
  details: StatusDetails
}

enum State {
  OFFLINE
  IDLE
  SEARCHING
  PLAYING
}

union StatusDetails = QueueSearching | QueueStopped | MatchFound

type QueueSearching {
  gamemode: String!
}

type QueueStopped {
  reason: String
}

type MatchFound {
  id: String! @goField(name: "matchId")
}

# User customizable profile
type Profile {
  username: String!
  dob: Time
}

type Query {
  # Query for the specified User or currently logged in user if not specified.
  user(id: String): User
}

input ProfileChanges @goModel(model: "map[string]interface{}") {
  username: String
  dob: Time
}

type Mutation {
  # TODO: figure out how users are created -- should have username required

  updateProfile(changes: ProfileChanges!): Boolean!
  startQueue(gamemode: String!): Boolean!
  stopQueue: Boolean!
}

type StatusUpdate {
  targets: [String!]!
  status: Status!
}

type Subscription {
  status(targets: [String!]): StatusUpdate!
}
