package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"fmt"
	"log"

	"github.com/GambitLLC/quip/graph/model"
	"github.com/GambitLLC/quip/libs/auth"
)

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context, changes map[string]interface{}) (bool, error) {
	log.Printf("%+v", changes)
	return true, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id *string) (*model.User, error) {
	if id == nil {
		userId := auth.UserFromContext(ctx)
		id = &userId
	}

	return &model.User{
		ID: *id,
	}, nil
}

// Profile is the resolver for the profile field.
func (r *userResolver) Profile(ctx context.Context, obj *model.User) (*model.Profile, error) {
	return &model.Profile{
		Username: fmt.Sprintf("user: %s", obj.ID),
		Dob: &model.Date{
			Year:  2003,
			Month: 1,
			Day:   2,
		},
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
