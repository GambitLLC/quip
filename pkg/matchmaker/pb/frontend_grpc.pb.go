// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: matchmaker/frontend.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuipFrontend_Connect_FullMethodName    = "/quip.matchmaker.QuipFrontend/Connect"
	QuipFrontend_GetPlayer_FullMethodName  = "/quip.matchmaker.QuipFrontend/GetPlayer"
	QuipFrontend_StartQueue_FullMethodName = "/quip.matchmaker.QuipFrontend/StartQueue"
	QuipFrontend_StopQueue_FullMethodName  = "/quip.matchmaker.QuipFrontend/StopQueue"
)

// QuipFrontendClient is the client API for QuipFrontend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuipFrontendClient interface {
	// Connect is a long-lived rpc for clients to receive status updates.
	// A client must be connected before any other frontend methods (start queue, etc)
	// may be called.
	Connect(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (QuipFrontend_ConnectClient, error)
	GetPlayer(ctx context.Context, in *GetPlayerRequest, opts ...grpc.CallOption) (*Player, error)
	StartQueue(ctx context.Context, in *StartQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StopQueue(ctx context.Context, in *StopQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type quipFrontendClient struct {
	cc grpc.ClientConnInterface
}

func NewQuipFrontendClient(cc grpc.ClientConnInterface) QuipFrontendClient {
	return &quipFrontendClient{cc}
}

func (c *quipFrontendClient) Connect(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (QuipFrontend_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &QuipFrontend_ServiceDesc.Streams[0], QuipFrontend_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &quipFrontendConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QuipFrontend_ConnectClient interface {
	Recv() (*PlayerUpdate, error)
	grpc.ClientStream
}

type quipFrontendConnectClient struct {
	grpc.ClientStream
}

func (x *quipFrontendConnectClient) Recv() (*PlayerUpdate, error) {
	m := new(PlayerUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *quipFrontendClient) GetPlayer(ctx context.Context, in *GetPlayerRequest, opts ...grpc.CallOption) (*Player, error) {
	out := new(Player)
	err := c.cc.Invoke(ctx, QuipFrontend_GetPlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quipFrontendClient) StartQueue(ctx context.Context, in *StartQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QuipFrontend_StartQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quipFrontendClient) StopQueue(ctx context.Context, in *StopQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QuipFrontend_StopQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuipFrontendServer is the server API for QuipFrontend service.
// All implementations should embed UnimplementedQuipFrontendServer
// for forward compatibility
type QuipFrontendServer interface {
	// Connect is a long-lived rpc for clients to receive status updates.
	// A client must be connected before any other frontend methods (start queue, etc)
	// may be called.
	Connect(*emptypb.Empty, QuipFrontend_ConnectServer) error
	GetPlayer(context.Context, *GetPlayerRequest) (*Player, error)
	StartQueue(context.Context, *StartQueueRequest) (*emptypb.Empty, error)
	StopQueue(context.Context, *StopQueueRequest) (*emptypb.Empty, error)
}

// UnimplementedQuipFrontendServer should be embedded to have forward compatible implementations.
type UnimplementedQuipFrontendServer struct {
}

func (UnimplementedQuipFrontendServer) Connect(*emptypb.Empty, QuipFrontend_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedQuipFrontendServer) GetPlayer(context.Context, *GetPlayerRequest) (*Player, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayer not implemented")
}
func (UnimplementedQuipFrontendServer) StartQueue(context.Context, *StartQueueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartQueue not implemented")
}
func (UnimplementedQuipFrontendServer) StopQueue(context.Context, *StopQueueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopQueue not implemented")
}

// UnsafeQuipFrontendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuipFrontendServer will
// result in compilation errors.
type UnsafeQuipFrontendServer interface {
	mustEmbedUnimplementedQuipFrontendServer()
}

func RegisterQuipFrontendServer(s grpc.ServiceRegistrar, srv QuipFrontendServer) {
	s.RegisterService(&QuipFrontend_ServiceDesc, srv)
}

func _QuipFrontend_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuipFrontendServer).Connect(m, &quipFrontendConnectServer{stream})
}

type QuipFrontend_ConnectServer interface {
	Send(*PlayerUpdate) error
	grpc.ServerStream
}

type quipFrontendConnectServer struct {
	grpc.ServerStream
}

func (x *quipFrontendConnectServer) Send(m *PlayerUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _QuipFrontend_GetPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuipFrontendServer).GetPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuipFrontend_GetPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuipFrontendServer).GetPlayer(ctx, req.(*GetPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuipFrontend_StartQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuipFrontendServer).StartQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuipFrontend_StartQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuipFrontendServer).StartQueue(ctx, req.(*StartQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuipFrontend_StopQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuipFrontendServer).StopQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuipFrontend_StopQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuipFrontendServer).StopQueue(ctx, req.(*StopQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuipFrontend_ServiceDesc is the grpc.ServiceDesc for QuipFrontend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuipFrontend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quip.matchmaker.QuipFrontend",
	HandlerType: (*QuipFrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayer",
			Handler:    _QuipFrontend_GetPlayer_Handler,
		},
		{
			MethodName: "StartQueue",
			Handler:    _QuipFrontend_StartQueue_Handler,
		},
		{
			MethodName: "StopQueue",
			Handler:    _QuipFrontend_StopQueue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _QuipFrontend_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "matchmaker/frontend.proto",
}
