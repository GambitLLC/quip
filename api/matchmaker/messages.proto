syntax = "proto3";
package quip.matchmaker;
option go_package="github.com/GambitLLC/quip/libs/pb/matchmaker";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

message Player {
  // Id represents the player identifier.
  string id = 1;

  // State is a simple enum representing whether the player is currently
  // online, idle, in queue, or in a game.
  PlayerState state = 2;

  // Assignment represents a queue or match the player is currently in.
  oneof assignment {
    QueueAssignment queue_assignment = 3;
    MatchAssignment match_assignment = 4;
  }
}

enum PlayerState {
  PLAYER_STATE_OFFLINE = 0;
  PLAYER_STATE_ONLINE = 1;
  PLAYER_STATE_IDLE = 2;
  PLAYER_STATE_SEARCHING = 3;
  PLAYER_STATE_PLAYING = 4;
}

message QueueAssignment {
  // Queue identifier to determine which queue has updated.
  string id = 1;

  // Config represents information about the desired game.
  QueueConfiguration config = 2;
  
  // Start time is the time the queue began.
  google.protobuf.Timestamp start_time = 3;
}

message QueueConfiguration {
  string gamemode = 1;

  // TODO: location (server location)
}

message MatchAssignment {
  // Id represents the auto-generated match id.
  string id = 1;

  // Connection information for this match.
  string connection = 2;
}

message StatusUpdate {
  oneof update {
    QueueAssignment queue_started = 2;
    QueueStopped queue_stopped = 3;
    MatchFound match_found = 4;
    MatchCancelled match_cancelled = 5;
    MatchStarted match_started = 6;
    MatchFinished match_finished = 7;
  }
}

enum Reason {
  REASON_UNSPECIFIED = 0;
  REASON_PLAYER = 1;
}

// QueueStopped contains information about why a queue has stopped.
message QueueStopped {
  string id = 1;
  Reason reason = 2;
  optional string message = 3;
}

// MatchFound contains information about a potential match that was found.
// Sent as intermediate step for players to accept (send match wager) match before
// allocating a server.
message MatchFound {
  string match_id = 1;
  google.protobuf.Timestamp time = 2;
}

message MatchCancelled {
  string match_id = 1;
  Reason reason = 2;
}

// MatchStarted contains necessary match information to identify and connect to a match.
message MatchStarted {
  string match_id = 1;
  string connection = 2;
}

message MatchFinished {
  string match_id = 1;
}

message MatchConfiguration {
  string gamemode = 1;
}

message MatchRoster {
  // TODO: support teams
  // message Team { repeated string players = 1; }
  // repeated Team teams = 1;

  repeated string players = 1;
}

message MatchResults {
  // Placements is an ordered list of players in order of placement
  // The first player should be the winner of the match (top of scoreboard)
  repeated string placements = 1;

  // Scores is a map of players to numeric scores dependent on gamemode
  map<string, double> scores = 2;

  // arbitrary additional info dependent on match
  optional google.protobuf.Any memo = 3; // TODO: better name?
}