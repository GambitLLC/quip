syntax = "proto3";
package quip.matchmaker;
option go_package="github.com/GambitLLC/quip/libs/pb/matchmaker";

import "matchmaker/messages.proto";
import "google/rpc/status.proto";

// Matchmaker service for end user clients.
service QuipFrontend {
  // Connect is a long-lived rpc for clients to send queue actions and
  // receive queue updates.
  rpc Connect(stream Request) returns (stream Response);
}

message Request {
  oneof action {
    // TODO: is a keepalive message needed?

    GetPlayer get_player = 1; 
    StartQueue start_queue = 2;
    StopQueue stop_queue = 3;
  }
}

// GetPlayer gets the details for the currently logged in player.
message GetPlayer {
}

message StartQueue {
  QueueConfiguration config = 1;
}

message StopQueue {
}

message Response {
  oneof message {
    // error is sent if any request failed.
    google.rpc.Status error = 1;

    // Response to GetPlayer or any StateUpdate messages for friends.
    Player player = 2;

    // Status updates for the current player.
    StatusUpdate status_update = 4;
  }
}
