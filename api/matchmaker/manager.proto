syntax = "proto3";
package quip.matchmaker;
option go_package="github.com/GambitLLC/quip/libs/pb/matchmaker";

import "google/protobuf/empty.proto";
import "matchmaker/messages.proto";

// Manager service to keep track of match details (in-progress and completed).
// Should only be called by gameservers to update match progress.
service QuipManager {
  // CreateMatch should be called by gameservers when they are allocated. It will attempt
  // to mark all players in the roster as participants in the match.
  rpc CreateMatch(CreateMatchRequest) returns (google.protobuf.Empty);

  // StartMatch should be called when gameservers actually begin play.
  // For matches with a wager, this means after collecting the wager from all players.
  rpc StartMatch(StartMatchRequest) returns (google.protobuf.Empty);

  // CancelMatch should be called if gameservers do not start play for any reason.
  rpc CancelMatch(CancelMatchRequest) returns (google.protobuf.Empty);

  // FinishMatch should be called when gameservers finish play.
  rpc FinishMatch(FinishMatchRequest) returns (google.protobuf.Empty);
}

message CreateMatchRequest {
  string match_id = 1;
  MatchConfiguration config = 2;
  MatchRoster roster = 3;
}

message StartMatchRequest {
  string match_id = 1;
}

message CancelMatchRequest {
  string match_id = 1;
}

message FinishMatchRequest {
  string match_id = 1;
  MatchResults results = 2;
}